#+OPTIONS: ^:nil
#+EXPORT_EXCLUDE_TAGS: noexport
#+SETUPFILE: /Users/tangrammer/git/org-html-themes/setup/theme-readtheorg.setup
#+TITLE: akvo-lumen specs 
#+FILETAGS: :index:

* Welcome to specs generated with LP                                  
  
This is the first interaction with [[https://clojure.org/guides/spec][clojure core.spec]]
thus is a fresh topic at lumen codebase we're trying *Literate Programming (LP)* independent approach to write the specs

Main idea of *LP* is that you write the code having a closer actitude of documenting a development process instead of writing as a super start cryptic haker that only a machine could follow

The tools used for using *LP* are [[https://www.gnu.org/software/emacs/][Emacs]], [[https://orgmode.org/][orgmode]] and [[https://orgmode.org/worg/org-contrib/babel/][babel]]


Following you'll find the main topics covered in lumen

* core
#+INCLUDE: "core.org"

* aggregation                                                   
#+INCLUDE: "aggregation.org"  
* visualisation                                               

#+INCLUDE: "visualisation.org"  

* DELEGATED components
  CLOSED: [2018-06-20 Wed 23:28]
Lumen is a Component Oriented System, it uses [[https://github.com/duct-framework/duct][duct framework]] that follows [[https://github.com/stuartsierra/component][component]] library patterns
Main idea behind component is ~Managed lifecycle of stateful objects in Clojure~ (IoC or DI)

;; WIP #+INCLUDE: "components.org" 
* config                                                             :config:
Configuration of lumen backend is done through [[https://github.com/akvo/akvo-lumen/blob/specs-lp/backend/resources/akvo/lumen/system.edn#L1][system.edn]]
 #+INCLUDE: "config.org" 
* db                                                                     :db:
#+INCLUDE: "db.org" 
* DELEGATED endpoints                                             :endpoints:
  CLOSED: [2018-06-20 Wed 23:28]
these endopoints functions should be specified as [[https://clojure.org/guides/spec#_higher_order_functions][HOF]]

;; #+INCLUDE: "endpoints.org" 
* DELEGATED imports
  CLOSED: [2018-06-20 Wed 23:28]
;; #+INCLUDE: "imports.org" 
* libs                                                                 :libs:
#+INCLUDE: "libs.org" 
* transformations                                           :transformations:
#+INCLUDE: "transformations.org" 

* FAQs

** TODO explain where to put this stuff :) ?
 explain why choose ~backend/src/akvo/lumen/specs/~ as org folder and why generated html has to live in ~docs~ folder
** FEEDBACK ~[org.clojure/test.check "0.9.0" :scope "test"]~
   only reason to have this ~test~ dependency in ~prod~ side is to be able to generate samples inside custom generator
     
** DONE investigate if clojure.spec can check value returned by function spec(ed)
   CLOSED: [2018-06-20 Wed 22:28]
clojure.spec only can check/instrument args in function call but no the value returned by the function. 

Following this [[https://groups.google.com/forum/#!topic/clojure/JU6EmjtbRiQ][thread]] is not possible (using plain clojure.spec lib) but there is other option to test it https://github.com/jeaye/orchestra 




** TODO [[https://github.com/akvo/akvo-lumen/issues/1441#issuecomment-398687412][how to naming schemas ns and aliases]]
** TODO how to aliasing namespaces
the other problem to think about is how long this alias should be ... and which pattern to apply when we need to reduce naming

* tools                                                               :index:

** dev
   #+INCLUDE: "dev.org"

